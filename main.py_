import sys
import os
import shutil
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QHBoxLayout, QSplitter,
    QAction, QFileDialog, QMessageBox, QMenuBar, QVBoxLayout,
    QPushButton, QFrame, QInputDialog, QStatusBar
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon

# Import custom modules
from modules.file_explorer import FileExplorerPanel
from modules.customization import apply_theme, play_sound
from modules.ai_integration import AIIntegrationDialog
from modules.plugin_manager import PluginManager

class GXplorerMainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("GXplorer")
        self.setGeometry(100, 100, 1200, 800)
        
        # Track which panel is active (left or right)
        self.active_panel = None

        # Set up the central widget with a horizontal splitter (dual-pane)
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        self.splitter = QSplitter(Qt.Horizontal)
        self.left_panel = FileExplorerPanel(start_path=os.path.expanduser("~"))
        self.right_panel = FileExplorerPanel(start_path=os.path.expanduser("~"))

        # When the user clicks inside a panel, we set that panel as active.
        self.left_panel.tree.clicked.connect(lambda: self.set_active_panel(self.left_panel))
        self.right_panel.tree.clicked.connect(lambda: self.set_active_panel(self.right_panel))

        self.splitter.addWidget(self.left_panel)
        self.splitter.addWidget(self.right_panel)
        
        # Add splitter to the main layout
        main_layout.addWidget(self.splitter)

        # Add a function button bar at the bottom
        self.function_bar = QFrame()
        self.function_bar_layout = QHBoxLayout(self.function_bar)
        self.function_bar_layout.setSpacing(15)
        self.function_bar_layout.setContentsMargins(10, 10, 10, 10)

        # Create function buttons in Total Commander style:
        # F2: Rename, F3: View, F4: Edit, F5: Copy, F6: Move, F7: MkDir, F8: Delete
        self.f2_rename_button = QPushButton("F2 Rename")
        self.f2_rename_button.clicked.connect(self.on_f2_rename)

        self.f3_view_button = QPushButton("F3 View")
        self.f3_view_button.clicked.connect(self.on_f3_view)
        
        self.f4_edit_button = QPushButton("F4 Edit")
        self.f4_edit_button.clicked.connect(self.on_f4_edit)
        
        self.f5_copy_button = QPushButton("F5 Copy")
        self.f5_copy_button.clicked.connect(self.on_f5_copy)
        
        self.f6_move_button = QPushButton("F6 Move")
        self.f6_move_button.clicked.connect(self.on_f6_move)
        
        self.f7_mkdir_button = QPushButton("F7 MkDir")
        self.f7_mkdir_button.clicked.connect(self.on_f7_mkdir)
        
        self.f8_delete_button = QPushButton("F8 Delete")
        self.f8_delete_button.clicked.connect(self.on_f8_delete)

        # Add buttons to the layout in order.
        self.function_bar_layout.addWidget(self.f2_rename_button)
        self.function_bar_layout.addWidget(self.f3_view_button)
        self.function_bar_layout.addWidget(self.f4_edit_button)
        self.function_bar_layout.addWidget(self.f5_copy_button)
        self.function_bar_layout.addWidget(self.f6_move_button)
        self.function_bar_layout.addWidget(self.f7_mkdir_button)
        self.function_bar_layout.addWidget(self.f8_delete_button)

        main_layout.addWidget(self.function_bar)

        # Set up the menu bar
        self.create_menus()

        # Load plugins
        self.plugin_manager = PluginManager(self)
        self.plugin_manager.load_plugins()

        # Apply Dark Mode by default (defined in resources/themes/dark.qss)
        apply_theme(self, "dark")

        # Add a status bar mimicking Total Commander's info bar.
        self.setStatusBar(QStatusBar(self))
        self.statusBar().showMessage("Ready")

        # Initially set the left panel as active
        self.set_active_panel(self.left_panel)

    def create_menus(self):
        menubar = self.menuBar()

        # File Menu
        file_menu = menubar.addMenu("File")
        exit_action = QAction("Exit", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # View Menu
        view_menu = menubar.addMenu("View")
        theme_action = QAction("Change Theme", self)
        theme_action.triggered.connect(self.change_theme)
        view_menu.addAction(theme_action)

        # Tools Menu
        tools_menu = menubar.addMenu("Tools")
        ai_action = QAction("AI Assistant", self)
        ai_action.triggered.connect(self.open_ai_dialog)
        tools_menu.addAction(ai_action)

        # Plugins Menu (populated by plugins)
        self.plugins_menu = menubar.addMenu("Plugins")
        # Plugins can add their own menu actions by accessing main_window.plugins_menu

        # Help Menu
        help_menu = menubar.addMenu("Help")
        about_action = QAction("About GXplorer", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

    def set_active_panel(self, panel):
        """Set the given FileExplorerPanel as the active panel."""
        self.active_panel = panel
        # Optionally highlight the active panel visually, or play a sound:
        play_sound("panel_focus")

    def change_theme(self):
        # Let the user pick a .qss file from resources/themes
        theme_file, _ = QFileDialog.getOpenFileName(
            self, "Select Theme",
            os.path.join("resources", "themes"),
            "QSS Files (*.qss)"
        )
        if theme_file:
            # Extract theme name from file name
            theme_name = os.path.splitext(os.path.basename(theme_file))[0]
            # Apply the theme
            from modules.customization import apply_theme
            apply_theme(self, theme_name, theme_path=theme_file)
            play_sound("theme_change")
            QMessageBox.information(self, "Theme Changed", f"Theme changed to: {theme_name}")

    def open_ai_dialog(self):
        ai_dialog = AIIntegrationDialog(self)
        ai_dialog.exec_()

    def show_about(self):
        QMessageBox.information(
            self, "About GXplorer",
            "GXplorer\n\nA highly customizable, dual-pane Windows file explorer inspired by Opera GX and Total Commander."
        )

    # -----------------------
    # Function Button Actions
    # -----------------------

    def on_f2_rename(self):
        """F2: Rename the selected file(s)."""
        if not self.active_panel:
            return
        selected_indexes = self.active_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return
        # Use the first selected index for renaming.
        self.active_panel.rename_item(selected_indexes[0])
        play_sound("rename")

    def on_f3_view(self):
        """F3: View the selected file(s). Typically opens with default viewer."""
        if not self.active_panel:
            return
        selected_indexes = self.active_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return

        for index in selected_indexes:
            path = self.active_panel.model.filePath(index)
            if os.path.isfile(path):
                try:
                    os.startfile(path)
                except Exception as e:
                    QMessageBox.warning(self, "Error", f"Cannot open file: {str(e)}")
            else:
                self.active_panel.navigate_to_path(path)

        play_sound("open_file")

    def on_f4_edit(self):
        """F4: Edit the selected file(s). Opens with default editor if configured."""
        if not self.active_panel:
            return
        selected_indexes = self.active_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return

        for index in selected_indexes:
            path = self.active_panel.model.filePath(index)
            if os.path.isfile(path):
                try:
                    os.startfile(path, "edit")
                except:
                    try:
                        os.startfile(path)
                    except Exception as e:
                        QMessageBox.warning(self, "Error", f"Cannot edit file: {str(e)}")
            else:
                self.active_panel.navigate_to_path(path)

        play_sound("open_file")

    def on_f5_copy(self):
        """F5: Copy selected items from the active panel to the other panel."""
        if not self.active_panel:
            return

        source_panel = self.active_panel
        target_panel = self.right_panel if source_panel == self.left_panel else self.left_panel

        selected_indexes = source_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return

        selected_paths = set()
        for index in selected_indexes:
            selected_paths.add(source_panel.model.filePath(index))

        dest_dir = target_panel.current_path

        for src in selected_paths:
            src = os.path.normpath(src)
            if os.path.isfile(src):
                try:
                    shutil.copy2(src, dest_dir)
                except Exception as e:
                    QMessageBox.warning(self, "Copy Error", f"Could not copy {src}:\n{e}")
            elif os.path.isdir(src):
                try:
                    base_name = os.path.basename(src)
                    target_path = os.path.join(dest_dir, base_name)
                    shutil.copytree(src, target_path)
                except Exception as e:
                    QMessageBox.warning(self, "Copy Error", f"Could not copy folder {src}:\n{e}")

        source_panel.navigate_to_path(source_panel.current_path)
        target_panel.navigate_to_path(target_panel.current_path)
        play_sound("copy")

    def on_f6_move(self):
        """F6: Move selected items from the active panel to the other panel."""
        if not self.active_panel:
            return

        source_panel = self.active_panel
        target_panel = self.right_panel if source_panel == self.left_panel else self.left_panel

        selected_indexes = source_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return

        selected_paths = set()
        for index in selected_indexes:
            selected_paths.add(source_panel.model.filePath(index))

        dest_dir = target_panel.current_path

        for src in selected_paths:
            src = os.path.normpath(src)
            base_name = os.path.basename(src)
            target_path = os.path.join(dest_dir, base_name)
            try:
                shutil.move(src, target_path)
            except Exception as e:
                QMessageBox.warning(self, "Move Error", f"Could not move {src}:\n{e}")

        source_panel.navigate_to_path(source_panel.current_path)
        target_panel.navigate_to_path(target_panel.current_path)
        play_sound("move")

    def on_f7_mkdir(self):
        """F7: Create a new folder in the active panel."""
        if not self.active_panel:
            return
        folder_name, ok = QInputDialog.getText(self, "Create Folder", "Enter folder name:")
        if ok and folder_name.strip():
            new_folder_path = os.path.join(self.active_panel.current_path, folder_name.strip())
            try:
                os.mkdir(new_folder_path)
                self.active_panel.navigate_to_path(self.active_panel.current_path)
                play_sound("mkdir")
            except Exception as e:
                QMessageBox.warning(self, "Error", f"Cannot create folder: {e}")

    def on_f8_delete(self):
        """F8: Delete selected items from the active panel."""
        if not self.active_panel:
            return
        selected_indexes = self.active_panel.tree.selectionModel().selectedIndexes()
        if not selected_indexes:
            return

        selected_paths = set()
        for index in selected_indexes:
            selected_paths.add(self.active_panel.model.filePath(index))

        confirm = QMessageBox.question(
            self, "Delete",
            "Are you sure you want to delete the selected item(s)?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        if confirm == QMessageBox.Yes:
            for path in selected_paths:
                path = os.path.normpath(path)
                try:
                    if os.path.isfile(path):
                        os.remove(path)
                    elif os.path.isdir(path):
                        shutil.rmtree(path)
                except Exception as e:
                    QMessageBox.warning(self, "Error", f"Could not delete {path}:\n{e}")

            self.active_panel.navigate_to_path(self.active_panel.current_path)
            play_sound("delete")

def main():
    app = QApplication(sys.argv)
    window = GXplorerMainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
